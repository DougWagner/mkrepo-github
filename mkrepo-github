#!/bin/bash

# MIT License

# Copyright (c) 2017 Douglas Wagner

# Full license text included in source directory

# This script will create a GitHub repository using curl.
# If the two required fields are not entered in the command line, the script will ask for them.
# Optional fields are not prompted for if not entered in command line.

# required fields:
# username
# name

# optional fields:
# description
# homepage
# private
# has_issues
# has_projects
# has_wiki
# team_id
# auto_init
# gitignore_template
# license_template
# allow_squash_merge
# allow_merge_commit
# allow_rebase_merge

# parse command line arguments
for i in "$@" 
do
case $i in
    --user=*)
    USERNAME="${i#*=}"
    ;;
    --name=*)
    REPONAME="${i#*=}"
    ;;
    --description=*)
    DESCRIPTION="${i#*=}"
    ;;
    --homepage=*)
    HOMEPAGE="${i#*=}"
    ;;
    --private=*)
    PRIVATE="${i#*=}"
    ;;
    --has_issues=*)
    HAS_ISSUES="${i#*=}"
    ;;
    --has_projects=*)
    HAS_PROJECTS="${i#*=}"
    ;;
    --has_wiki=*)
    HAS_WIKI="${i#*=}"
    ;;
    --team_id=*)
    TEAM_ID="${i#*=}"
    ;;
    --auto_init=*)
    AUTO_INIT="${i#*=}"
    ;;
    --gitignore_template=*)
    GITIGNORE_TEMPLATE="${i#*=}"
    ;;
    --license_template=*)
    LICENSE_TEMPLATE="${i#*=}"
    ;;
    --allow_squash_merge=*)
    ALLOW_SQUASH_MERGE="${i#*=}"
    ;;
    --allow_merge_commit=*)
    ALLOW_MERGE_COMMIT="${i#*=}"
    ;;
    --allow_rebase_merge=*)
    ALLOW_REBASE_MERGE="${i#*=}"
    ;;
    *)
    echo "Invalid argument"
    echo "Accepted arguments: user, name, description, homepage, private, has_issues, has_projects, has_wiki, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge"
    echo "Usage: mkrepo-github --user=[username] --name=[reponame]"
    exit
esac
done

# obtain GitHub username if not entered in command line
if [[ -z $USERNAME ]]
then
    printf "Enter your GitHub username: "
    read USERNAME
fi

# obtain repository name if not entered in command line
if [[ -z $REPONAME ]]
then
    printf "Enter the name of the repository you wish to create: "
    read REPONAME
fi

# make sure repository name is valid
whitespace=" "
if [[ $REPONAME =~ $whitespace ]]
then
    echo "Invalid repository name: cannot contain spaces"
    echo "Consider using '-' instead of whitespace"
    exit
fi

# time to generate POST json string for curl
# but first, let's make some functions to help us out
endquote="\""

add_string() { # arguments $1: type, $2: val
    add=",\"$1\":\""
    JSON=$JSON$add$2$endquote
}

add_boolean() { # arguments $1: type, $2: val
    if [ "$2" == "true" ] || [ "$2" == "false" ]
    then
        add=",\"$1\":$2"
        JSON=$JSON$add
    else
        echo "\"$1\" must be a boolean value"
        exit
    fi
}

# ok NOW we can generate our json object
JSON="{\"name\":\""

JSON=$JSON$REPONAME$endquote

if [[ ! -z $DESCRIPTION ]]
then
    add_string "description" "$DESCRIPTION"
fi

if [[ ! -z $HOMEPAGE ]]
then
    add_string "homepage" "$HOMEPAGE"
fi

if [[ ! -z $PRIVATE ]]
then
    add_boolean "private" "$PRIVATE"
fi

if [[ ! -z $HAS_ISSUES ]]
then
    add_boolean "has_issues" "$HAS_ISSUES"
fi

if [[ ! -z $HAS_PROJECTS ]]
then
    add_boolean "has_projects" "$HAS_PROJECTS"
fi

if [[ ! -z $HAS_WIKI ]]
then
    add_boolean "has_wiki" "$HAS_WIKI"
fi

if [[ ! -z $TEAM_ID ]]
then                                # i'm not making this its own function because it's the only option that takes an integer
    if [[ $TEAM_ID -eq $TEAM_ID ]]  # also, if there's a better way to check if a string is an integer, let me know
    then
        add_team_id=',"team_id":'
        JSON=$JSON$add_team_id$TEAM_ID
    else
        echo "\"team_id\" must be an integer value"
        exit
    fi
fi

if [[ ! -z $AUTO_INIT ]]
then
    add_boolean "auto_init" "$AUTO_INIT"
fi

if [[ ! -z $GITIGNORE_TEMPLATE ]]
then
    add_string "gitignore_template" "$GITIGNORE_TEMPLATE"
fi

if [[ ! -z $LICENSE_TEMPLATE ]]
then
    add_string "license_template" "$LICENSE_TEMPLATE"
fi

if [[ ! -z $ALLOW_SQUASH_MERGE ]]
then
    add_boolean "allow_squash_merge" "$ALLOW_SQUASH_MERGE"
fi

if [[ ! -z $ALLOW_MERGE_COMMIT ]]
then
    add_boolean "allow_merge_commit" "$ALLOW_MERGE_COMMIT"
fi

if [[ ! -z $ALLOW_REBASE_MERGE ]]
then
    add_boolean "allow_rebase_merge" "$ALLOW_REBASE_MERGE"
fi

endjson="}"
JSON=$JSON$endjson

# ok we've gathered the info, let's send our request to GitHub!
echo "You are about to create a GitHub repository with the following information."
echo $JSON
printf "Is this correct? (y/n) "
read confirmation
if [[ $confirmation == "y" ]]
then
    curl -u $USERNAME https://api.github.com/user/repos -d "$JSON"
fi
